From 43c9ffbdad1c3035cc02d1ec5b2776e1e61aca4d Mon Sep 17 00:00:00 2001
From: Matthijs van Duin <matthijsvanduin@gmail.com>
Date: Sat, 17 Dec 2016 03:51:43 +0100
Subject: [PATCH] WiP trying to achieve fast link up at boot

The phy already has been reset superfluously by u-boot and probably has
link up already.  Try to actually use that!
---
 drivers/net/ethernet/ti/davinci_mdio.c |  7 +++++++
 drivers/net/phy/phy.c                  |  2 +-
 drivers/net/phy/phy_device.c           |  1 +
 drivers/net/phy/smsc.c                 | 28 ++++++++++++++++++++++++++++
 4 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/ti/davinci_mdio.c b/drivers/net/ethernet/ti/davinci_mdio.c
index f7e5a2886456..3fddca6b418d 100644
--- a/drivers/net/ethernet/ti/davinci_mdio.c
+++ b/drivers/net/ethernet/ti/davinci_mdio.c
@@ -285,6 +285,11 @@ static int davinci_mdio_read(struct mii_bus *bus, int phy_id, int phy_reg)
 		break;
 	}
 
+	if (ret < 0)
+		dev_dbg( data->dev, "reg %d read err %d\n", phy_reg, ret );
+	else
+		dev_dbg( data->dev, "reg %d read 0x%04x\n", phy_reg, ret );
+
 	pm_runtime_mark_last_busy(data->dev);
 	pm_runtime_put_autosuspend(data->dev);
 	return ret;
@@ -300,6 +305,8 @@ static int davinci_mdio_write(struct mii_bus *bus, int phy_id,
 	if (phy_reg & ~PHY_REG_MASK || phy_id & ~PHY_ID_MASK)
 		return -EINVAL;
 
+	dev_dbg( data->dev, "reg %d write 0x%04x\n", phy_reg, phy_data );
+
 	ret = pm_runtime_get_sync(data->dev);
 	if (ret < 0) {
 		pm_runtime_put_noidle(data->dev);
diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
index 2b1e67bc1e73..f41eef2e1272 100644
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@ -555,7 +555,7 @@ EXPORT_SYMBOL(phy_start_aneg);
  */
 void phy_start_machine(struct phy_device *phydev)
 {
-	queue_delayed_work(system_power_efficient_wq, &phydev->state_queue, HZ);
+	queue_delayed_work(system_power_efficient_wq, &phydev->state_queue, 0);
 }
 EXPORT_SYMBOL_GPL(phy_start_machine);
 
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 67f25ac29025..55de49c1ee07 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -1234,6 +1234,7 @@ static int genphy_config_advert(struct phy_device *phydev)
 	adv |= ethtool_adv_to_mii_adv_t(advertise);
 
 	if (adv != oldadv) {
+		dev_info( &phydev->mdio.dev, "changing advert from 0x%x to 0x%x\n", oldadv, adv );
 		err = phy_write(phydev, MII_ADVERTISE, adv);
 
 		if (err < 0)
diff --git a/drivers/net/phy/smsc.c b/drivers/net/phy/smsc.c
index 2306bfae057f..cdb72d97f0a2 100644
--- a/drivers/net/phy/smsc.c
+++ b/drivers/net/phy/smsc.c
@@ -76,6 +76,31 @@ static int smsc_phy_config_init(struct phy_device *phydev)
 	return smsc_phy_ack_interrupt(phydev);
 }
 
+static int smsc_phy_quickstart(struct phy_device *phydev)
+{
+	int rc;
+
+	if (phydev->state != PHY_READY)
+		return 1;
+
+	rc = phy_read(phydev, MII_BMCR);
+	if (rc < 0)
+		return rc;
+	rc &= ~( 0x7f | BMCR_FULLDPLX | BMCR_SPEED100);
+	if (rc != BMCR_ANENABLE) {
+		dev_info( &phydev->mdio.dev, "strange BMCR\n" );
+		return 1;
+	}
+
+	rc = phy_read(phydev, MII_ADVERTISE);
+	if (rc < 0)
+		return rc;
+
+	phydev->advertising = mii_adv_to_ethtool_adv_t(rc);
+	phydev->state = PHY_RESUMING;
+	return 0;
+}
+
 static int smsc_phy_reset(struct phy_device *phydev)
 {
 	int rc = phy_read(phydev, MII_LAN83C185_SPECIAL_MODES);
@@ -89,6 +114,9 @@ static int smsc_phy_reset(struct phy_device *phydev)
 		/* set "all capable" mode */
 		rc |= MII_LAN83C185_MODE_ALL;
 		phy_write(phydev, MII_LAN83C185_SPECIAL_MODES, rc);
+	} else {
+		if (smsc_phy_quickstart(phydev) == 0)
+			return 0;
 	}
 
 	/* reset the phy */
-- 
2.15.1

