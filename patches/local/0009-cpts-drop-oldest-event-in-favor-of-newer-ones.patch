From e9eac8c9dd60f6f3150bc801e132b1943e2d4286 Mon Sep 17 00:00:00 2001
From: Matthijs van Duin <matthijsvanduin@gmail.com>
Date: Mon, 29 Jan 2018 23:28:55 +0100
Subject: [PATCH] cpts: drop oldest event in favor of newer ones

---
 drivers/net/ethernet/ti/cpts.c | 52 ++++++++++++++++--------------------------
 1 file changed, 20 insertions(+), 32 deletions(-)

diff --git a/drivers/net/ethernet/ti/cpts.c b/drivers/net/ethernet/ti/cpts.c
index fa32a1bdf998..15cb390af52f 100644
--- a/drivers/net/ethernet/ti/cpts.c
+++ b/drivers/net/ethernet/ti/cpts.c
@@ -66,35 +66,34 @@ static int cpts_fifo_pop(struct cpts *cpts, u32 *high, u32 *low)
 	return -1;
 }
 
-static int cpts_purge_events(struct cpts *cpts)
+static void cpts_queue_event(struct cpts *cpts, u32 high, u32 low)
 {
-	struct list_head *this, *next;
 	struct cpts_event *event;
-	int removed = 0;
 
-	list_for_each_safe(this, next, &cpts->events) {
-		event = list_entry(this, struct cpts_event, list);
-		if (event_expired(event)) {
-			list_del_init(&event->list);
-			list_add(&event->list, &cpts->pool);
-			++removed;
-		}
+	if (list_empty(&cpts->pool)) {
+		// drop oldest event
+		event = list_first_entry(&cpts->events,
+				struct cpts_event, list);
+		if (!event_expired(event))
+			pr_warn("cpts: event pool is empty, dropping event\n");
+	} else {
+		event = list_first_entry(&cpts->pool, struct cpts_event, list);
 	}
-
-	if (removed)
-		pr_debug("cpts: event pool cleaned up %d\n", removed);
-	return removed ? 0 : -1;
+	event->tmo = jiffies + 2;
+	event->high = high;
+	event->low = low;
+	list_move_tail(&event->list, &cpts->events);
 }
 
-static bool cpts_match_tx_ts(struct cpts *cpts, struct cpts_event *event)
+static bool cpts_match_tx_ts(struct cpts *cpts, u32 high, u32 low)
 {
 	struct sk_buff *skb, *tmp;
 	u16 seqid;
 	u8 mtype;
 	bool found = false;
 
-	mtype = (event->high >> MESSAGE_TYPE_SHIFT) & MESSAGE_TYPE_MASK;
-	seqid = (event->high >> SEQUENCE_ID_SHIFT) & SEQUENCE_ID_MASK;
+	mtype = (high >> MESSAGE_TYPE_SHIFT) & MESSAGE_TYPE_MASK;
+	seqid = (high >> SEQUENCE_ID_SHIFT) & SEQUENCE_ID_MASK;
 
 	/* no need to grab txq.lock as access is always done under cpts->lock */
 	skb_queue_walk_safe(&cpts->txq, skb, tmp) {
@@ -104,7 +103,7 @@ static bool cpts_match_tx_ts(struct cpts *cpts, struct cpts_event *event)
 					(struct cpts_skb_cb_data *)skb->cb;
 
 		if (cpts_match(skb, class, seqid, mtype)) {
-			u64 ns = timecounter_cyc2time(&cpts->tc, event->low);
+			u64 ns = timecounter_cyc2time(&cpts->tc, low);
 
 			memset(&ssh, 0, sizeof(ssh));
 			ssh.hwtstamp = ns_to_ktime(ns);
@@ -134,25 +133,15 @@ static int cpts_fifo_read(struct cpts *cpts, int match)
 {
 	int i, type = -1;
 	u32 hi, lo;
-	struct cpts_event *event;
 
 	for (i = 0; i < CPTS_FIFO_DEPTH; i++) {
 		if (cpts_fifo_pop(cpts, &hi, &lo))
 			break;
 
-		if (list_empty(&cpts->pool) && cpts_purge_events(cpts)) {
-			pr_err("cpts: event pool empty\n");
-			return -1;
-		}
-
-		event = list_first_entry(&cpts->pool, struct cpts_event, list);
-		event->tmo = jiffies + 2;
-		event->high = hi;
-		event->low = lo;
-		type = event_type(event);
+		type = (hi >> EVENT_TYPE_SHIFT) & EVENT_TYPE_MASK;
 		switch (type) {
 		case CPTS_EV_TX:
-			if (cpts_match_tx_ts(cpts, event)) {
+			if (cpts_match_tx_ts(cpts, hi, lo)) {
 				/* if the new event matches an existing skb,
 				 * then don't queue it
 				 */
@@ -160,8 +149,7 @@ static int cpts_fifo_read(struct cpts *cpts, int match)
 			}
 		case CPTS_EV_PUSH:
 		case CPTS_EV_RX:
-			list_del_init(&event->list);
-			list_add_tail(&event->list, &cpts->events);
+			cpts_queue_event(cpts, hi, lo);
 			break;
 		case CPTS_EV_ROLL:
 		case CPTS_EV_HALF:
-- 
2.15.1

